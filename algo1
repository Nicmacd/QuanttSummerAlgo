import mlfinlab as ml
import numpy as np

class team2(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2020, 6, 26)  # Set Start Date
        self.SetCash(100000000)  # Set Strategy Cash
        
        #set universe
        self.HRL = self.AddEquity("HRL", Resolution.Daily)
        self.AAL = self.AddEquity("AAL", Resolution.Daily)
        self.DAL = self.AddEquity("DAL", Resolution.Daily)
        
        #setting indicators
        #simple moving average
        self.smaAAL = self.SMA("AAL", 60, Resolution.Daily)
        self.smaDAL = self.SMA("DAL", 60, Resolution.Daily)
       
        #indicator warm up period
        self.SetWarmUp(timedelta(days = 60))
        
        if self.IsWarmingUp:
            return
        
        #place trade for HRL 120 min after market opens
        self.Schedule.On(self.DateRules.EveryDay(), self.TimeRules.AfterMarketOpen('HRL', 120), self.daily_check)

    def daily_check(self):
        
        aal_daily_close = AAL.close
        dal_daily_close = DAL.close
        
        #training the ornstainUhlenbeck method
        data_train = np.array([aal_daily_close], [dal_daily_close])
        data_oos = np.array([aal_daily_close], [dal_daily_close])
        
        example = ml.OrnsteinUhlenbeck()
        example.fit(data_train, data_frequency="D", discount_rate=0.5, transaction_cost=0, stop_loss=0.5)
        
        #checks optimal levels
        example.description()

    #entry
        #currPrice less than optimal entry and sma trending upwards
        if  self.Securities["AAL"].Price < example.optimal_entry_level() and self.smaAAL < self.Securities["AAL"].Price :
            aal_wt = 
            dal_wt = 
            self.SetHoldings("AAL", aal_wt)
            self.SetHoldings("DAL", -dal_wt)

        #currPrice less than optimal entry and sma trending downwards
        elif self.Securities["AAL"].Price < example.optimal_entry_level() and self.smaAAL > self.Securities["AAL"].Price :
            aal_wt = 
            dal_wt = 
            self.SetHoldings("AAL", -aal_wt)
            self.SetHoldings("DAL", dal_wt)

        #currPrice greater than optimal entry and sma trending upwards 
        elif self.Securities["AAL"].Price > example.optimal_entry_level() and self.smaAAL < self.Securities["AAL"].Price :
            self.SetHoldings("HRL", 0.1)

        #currPrice greater than optimal entry and sma trending downwards 
        elif self.Securities["AAL"].Price > example.optimal_entry_level() and self.smaAAL > self.Securities["AAL"].Price :
            self.SetHoldings("HRL", 0.1)   

    #exit
        #currPrice less than optimal exit and sma trending upwards
        elif  self.Securities["AAL"].Price < example.optimal_liquidation_level() and self.smaAAL < self.Securities["AAL"].Price :
            self.SetHoldings("HRL", 0.1)  

        #currPrice less than optimal exit and sma trending downwards
        elif self.Securities["AAL"].Price < example.optimal_liquidation_level() and self.smaAAL > self.Securities["AAL"].Price :
            aal_wt = 
            dal_wt = 
            self.SetHoldings("AAL", -aal_wt)
            self.SetHoldings("DAL", dal_wt)

        #currPrice greater than optimal exit and sma trending upwards 
        elif self.Securities["AAL"].Price > example.optimal_liquidation_level() and self.smaAAL < self.Securities["AAL"].Price :
            self.SetHoldings("HRL", 0.1)

        #currPrice greater than optimal exit and sma trending downwards 
        elif self.Securities["AAL"].Price > example.optimal_liquidation_level() and self.smaAAL > self.Securities["AAL"].Price :
            self.SetHoldings("HRL", 0.1)  


       
        self.Liquidate("HRL")
        self.Liquidate("AAL")
        self.Liquidate("DAL")
       
        #retrain model
        example.fit_to_assets(data_oos)
        
